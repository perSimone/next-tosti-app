import Head from "next/head";
import Link from "next/link";
import { sanityClient, urlFor } from "../lib/sanity";

// GROQ query with groq.js in sanity admin under /vision 
const recipesQuery = `*[_type == "recipe"]{
  _id,
  name,
  slug,
  mainImage,
}`;

export default function Home({ recipes }) {
  // recipes is in curly braces because we are using destructuring assignment 
  // it lets us pickout values inside of the object that is passed through the Home function
  return (
    <div>
      <Head>
        <title>Tosti kitchen</title>
        <meta name="description" content="Tosti app generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>Welcome to the Experius Tosti club</h1>

      <ul className="recipes-list">
        {recipes?.length > 0 &&
          recipes.map((recipe) => (
            <li key={recipe._id} className="recipe-card">
              <Link href={`/recipes/${recipe.slug.current}`}>
                <a>
                  <img src={urlFor(recipe.mainImage).url()} alt={recipe.name} />
                  <span>{recipe.name}</span>
                </a>
              </Link>
            </li>
          ))}
      </ul>
    </div>
  );
}


// here we fetch our data
// getStaticProps is going to take in the 'fetch' (similar to useEffect in react)
export async function getStaticProps() {
  // Use the recipesQuery on line 6 in this file
  // we are assigining recipies to the fetch (so all of the content we are getting in the recipiesQuery)
  const recipes = await sanityClient.fetch(recipesQuery);
  // We return props because we need props for all of this. We return props as the content we get from the recipesQuery using fetch
  return { props: { recipes } };
  // we have assigned recipes to props, so we can use it in out Home function (line 13)
}

// Reason to use async await on this getStaticProps is because next.js will pre-render this page at build-time 
// using the props returned by this getStaticProps. So that is why we add it here.